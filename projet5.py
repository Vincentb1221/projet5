import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
import numpy as np
# Configuration de la page Streamlit
st.set_page_config(page_title="Conseiller Financier Virtuel", layout="wide")
st.title("üíº Conseiller Financier Virtuel")
# Variables par d√©faut pour √©viter les erreurs si le formulaire n'est pas soumis
age = 30
objectif = "√âpargne retraite"
montant_initial = 1000
investissement_mensuel = 100
duree = 10
connaissance = "D√©butant"
risque = "Mod√©r√©e"
situation_familiale = "C√©libataire"
epargne_urgence = "Oui"
preference_esg = False
horizon_liquidite = "Non"
# Onglets
tabs = st.tabs([
    "Profil Financier",
    "Suggestions de Portefeuille",
    "Simulateur de Rendement",
    "Comparateur de Fonds",
    "Recherche d'Actions",
    "FAQ",
    "Analyse Technique",
    "Glossaire",
    "Watchlist",
    "Simulation Monte Carlo",
    "Quiz Financier",
    "Cryptomonnaie"
])
# 1. Profil Financier
with tabs[0]:
    st.header("üìã Profil Financier")
    with st.form("profil_form"):
        col1, col2 = st.columns(2)
        with col1:
            age = st.number_input("√Çge", min_value=18, max_value=100, value=30)
            objectif = st.selectbox("Objectif d'investissement", ["√âpargne retraite", "Achat maison", "Voyage", "Revenus passifs", "Autre"])
            montant_initial = st.number_input("Montant disponible √† investir maintenant ($)", min_value=0)
            investissement_mensuel = st.number_input("Montant investi chaque mois ($)", min_value=0)
            duree = st.slider("Dur√©e de l'investissement (en ann√©es)", 1, 50, 10)
            connaissance = st.select_slider("Connaissances en finance", options=["D√©butant", "Interm√©diaire", "Avanc√©"])
        with col2:
            risque = st.select_slider("Tol√©rance au risque", options=["Faible", "Mod√©r√©e", "√âlev√©e"])
            situation_familiale = st.selectbox("Situation familiale", ["C√©libataire", "Mari√©(e)", "Avec enfants", "Sans enfants"])
            epargne_urgence = st.radio("Avez-vous une √©pargne d'urgence?", ["Oui", "Non"])
            preference_esg = st.checkbox("Je pr√©f√®re des investissements responsables (ESG)")
            horizon_liquidite = st.radio("Avez-vous besoin de liquidit√© √† court terme?", ["Oui", "Non"])
        submitted = st.form_submit_button("Analyser mon profil")
    if submitted:
        st.success("‚úÖ Profil analys√© avec succ√®s!")
        st.write("### R√©sum√© de votre profil :")
        st.json({
            "√Çge": age,
            "Objectif": objectif,
            "Montant initial": montant_initial,
            "Investissement mensuel": investissement_mensuel,
            "Dur√©e": duree,
            "Tol√©rance au risque": risque,
            "Situation familiale": situation_familiale,
            "√âpargne d'urgence": epargne_urgence,
            "Pr√©f√©rence ESG": preference_esg,
            "Connaissances financi√®res": connaissance,
            "Besoin de liquidit√© court terme": horizon_liquidite
        })
# 2. Suggestions de Portefeuille
with tabs[1]:
    st.header("üìä Suggestions de Portefeuille")
    st.markdown("Voici un exemple de r√©partition sugg√©r√©e :")
    labels = ["Actions canadiennes", "Actions internationales", "Obligations", "Fonds ESG"]
    if risque == "Faible":
        sizes = [20, 20, 50, 10]
    elif risque == "Mod√©r√©e":
        sizes = [35, 35, 20, 10]
    else:
        sizes = [50, 35, 5, 10]
    fig, ax = plt.subplots()
    ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
    ax.axis('equal')
    st.pyplot(fig)
# 3. Simulateur de Rendement
with tabs[2]:
    st.header("üìà Simulateur de Rendement")
    taux = st.slider("Taux de rendement annuel (%)", 1, 15, 5)
    capital = montant_initial
    historique = []
    for annee in range(duree):
        capital = capital * (1 + taux / 100) + 12 * investissement_mensuel
        historique.append(capital)
    st.line_chart(historique)
    st.metric("Montant estim√© √† terme", f"{capital:,.2f} $")
# 4. Comparateur de Fonds
with tabs[3]:
    st.header("üîç Comparateur de Fonds")
    fond1 = st.selectbox("Choisir un premier fonds", ["VEQT", "XEQT", "VCNS", "VGRO"])
    fond2 = st.selectbox("Choisir un deuxi√®me fonds", ["VEQT", "XEQT", "VCNS", "VGRO"], index=1)
    donnees_fonds = {
        "VEQT": {"Rendement moyen": "8%", "Risque": "√âlev√©", "Frais": "0.25%"},
        "XEQT": {"Rendement moyen": "7.8%", "Risque": "√âlev√©", "Frais": "0.20%"},
        "VCNS": {"Rendement moyen": "5%", "Risque": "Faible", "Frais": "0.25%"},
        "VGRO": {"Rendement moyen": "6.5%", "Risque": "Mod√©r√©", "Frais": "0.25%"},
    }
    st.write(f"### üìå {fond1}")
    st.json(donnees_fonds[fond1])
    st.write(f"### üìå {fond2}")
    st.json(donnees_fonds[fond2])
# 5. Recherche d'Actions
with tabs[4]:
    st.header("üìä Recherche d'Actions")
    ticker = st.text_input("Entrez le symbole boursier (ex: AAPL, TSLA, MSFT)")
    if ticker:
        try:
            data = yf.Ticker(ticker)
            info = data.info
            st.subheader(info.get("longName", ticker))
            st.write(f"üìà Prix actuel: ${info.get('currentPrice', 'N/A')}")
            st.write(f"üè¢ Secteur: {info.get('sector', 'N/A')}")
            st.write(f"üìä Capitalisation boursi√®re: {info.get('marketCap', 'N/A')}")
            st.write(f"üìÖ Date de cr√©ation: {info.get('fundFamily', 'N/A')}")
            st.write(f"üí∞ Dividende: {info.get('dividendYield', 'N/A')}")
            st.write(f"üîç Description: {info.get('longBusinessSummary', 'N/A')}")
        except Exception as e:
            st.error("Erreur lors de la r√©cup√©ration des donn√©es. V√©rifiez le symbole.")
# 6. FAQ
with tabs[5]:
    st.header("‚ùì Questions fr√©quentes")
    with st.expander("C'est quoi un ETF?"):
        st.write("Un ETF (Exchange Traded Fund) est un fonds qui regroupe plusieurs actifs, comme des actions ou des obligations, et qui se transige en bourse comme une action.")
    with st.expander("Comment fonctionne le risque?"):
        st.write("Plus le rendement esp√©r√© est √©lev√©, plus le risque de pertes est grand.")
    with st.expander("√Ä quelle fr√©quence investir?"):
        st.write("Investir de mani√®re p√©riodique (ex: chaque mois) permet de r√©duire le risque.")
    with st.expander("Faut-il avoir une √©pargne d‚Äôurgence?"):
        st.write("Oui, avant d‚Äôinvestir √† long terme, il est important d‚Äôavoir un coussin de s√©curit√©.")
# 7. Analyse Technique
with tabs[6]:
    st.header("üìâ Analyse Technique (√† venir)")
    st.info("Cette section permettra d'ajouter vos propres analyses √† partir de donn√©es boursi√®res historiques.")
# 8. Glossaire
with tabs[7]:
    st.header("üìò Glossaire Financier")
    st.markdown("*ETF* : Fonds n√©goci√© en bourse, panier d'actifs transig√© comme une action.")
    st.markdown("*Fonds indiciel* : R√©plique la performance d'un indice (ex : S&P 500).")
    st.markdown("*Diversification* : R√©partir ses placements pour limiter les risques.")
    st.markdown("*Rendement* : Gain ou perte sur un investissement.")
    st.markdown("*Frais de gestion* : Co√ªts annuels d'un fonds, en pourcentage.")
# 9. Watchlist
with tabs[8]:
    st.header("üìù Ma Watchlist")
    watchlist = st.text_area("Ajouter des actions √† suivre (s√©par√©es par des virgules)", "")
    if watchlist:
        actions = [action.strip() for action in watchlist.split(",")]
        st.write("### Liste de suivi :")
        st.write(", ".join(actions))
# 10. Simulation Monte Carlo
with tabs[9]:
    st.header("üîÆ Simulation Monte Carlo")
    st.markdown("Simulez des rendements futurs pour vos investissements.")
    num_simulations = st.number_input("Nombre de simulations", min_value=100, max_value=10000, value=1000)
    volatilite = st.slider("Volatilit√© (%)", min_value=1, max_value=50, value=20)
    rendement_moyen = st.slider("Rendement moyen annuel (%)", min_value=1, max_value=20, value=8)
    simulation_results = []
    for _ in range(num_simulations):
        capital_final = montant_initial
        historique_simulation = [capital_final]
        for _ in range(duree):
            rendement = np.random.normal(rendement_moyen / 100, volatilite / 100)
            capital_final *= (1 + rendement)
            historique_simulation.append(capital_final)
        simulation_results.append(historique_simulation)
    fig, ax = plt.subplots()
    for simulation in simulation_results[:50]:
        ax.plot(simulation, alpha=0.3)
    st.pyplot(fig)
# 11. Quiz Financier
with tabs[10]:
    st.header("üß† Quiz Financier")
    question = "Quel est l'objectif principal de la diversification ?"
    options = ["Maximiser les rendements", "Minimiser les risques", "Augmenter les frais"]
    response = st.radio(question, options)
    if response:
        if response == "Minimiser les risques":
            st.success("Bonne r√©ponse! La diversification r√©duit les risques.")
        else:
            st.error("Mauvaise r√©ponse. L'objectif est de *minimiser les risques*.")
# 12. Cryptomonnaie
with tabs[11]:
    st.header("üí∞ Cryptomonnaie")
    st.write("""
    La cryptomonnaie est une monnaie num√©rique s√©curis√©e par cryptographie. 
    Exemples populaires : Bitcoin (BTC), Ethereum (ETH), Litecoin (LTC).
    """)
    st.write("*Bitcoin (BTC)* : La premi√®re et la plus c√©l√®bre des cryptomonnaies.")
    st.write("*Ethereum (ETH)* : Utilis√© pour des applications d√©centralis√©es.")
    st.write("*Litecoin (LTC)* : Une alternative plus rapide au Bitcoin.")
# ========== üîß Fonctions utilitaires ==========

def evaluer_profil(age, risque, connaissance):
    score = 0
    if age < 35:
        score += 1
    if risque == "√âlev√©e":
        score += 2
    elif risque == "Mod√©r√©e":
        score += 1
    if connaissance == "Avanc√©":
        score += 2
    elif connaissance == "Interm√©diaire":
        score += 1
    return score

# ========== üîÑ Mise √† jour du Simulateur de Rendement avec Altair ==========
import altair as alt

if "üìà Simulateur de Rendement" in [tab.label for tab in tabs]:
    with tabs[2]:
        st.subheader("üìä Graphique interactif")
        df = pd.DataFrame({
            "Ann√©e": list(range(1, duree+1)),
            "Capital estim√© ($)": historique
        })
        chart = alt.Chart(df).mark_line(point=True).encode(
            x='Ann√©e:O',
            y='Capital estim√© ($):Q',
            tooltip=['Ann√©e', 'Capital estim√© ($)']
        ).interactive()
        st.altair_chart(chart, use_container_width=True)

# ========== üßÆ Calculateur Retraite ==========

tabs.append(st.tab("üßì Planification Retraite"))
with tabs[-1]:
    st.header("üßì Planification Retraite")
    age_retraite = st.slider("√Ä quel √¢ge voulez-vous prendre votre retraite ?", 55, 70, 65)
    revenus_voulus = st.number_input("Revenu annuel d√©sir√© √† la retraite ($)", value=40000)
    duree_retraite = 90 - age_retraite
    inflation = st.slider("Inflation estim√©e (%)", 1, 5, 2)

    besoin_total = 0
    for i in range(duree_retraite):
        besoin_total += revenus_voulus * ((1 + inflation/100) ** i)

    st.success(f"üìä Vous aurez besoin d‚Äôenviron *{besoin_total:,.0f} $* pour {duree_retraite} ans de retraite.")

# ========== üß† Quiz am√©lior√© al√©atoire ==========
if "üß† Quiz Financier" in [tab.label for tab in tabs]:
    with tabs[10]:
        st.header("üß† Quiz Financier Am√©lior√©")
        import random
        questions = [
            {"q": "Quel est l'objectif principal de la diversification ?", "r": "Minimiser les risques", "opts": ["Maximiser les rendements", "Minimiser les risques", "Augmenter les frais"]},
            {"q": "Que signifie ETF ?", "r": "Fonds n√©goci√© en bourse", "opts": ["Frais de trading", "Fonds n√©goci√© en bourse", "√âpargne temporaire fixe"]},
            {"q": "C'est quoi un dividende ?", "r": "Une part des b√©n√©fices revers√©e aux actionnaires", "opts": ["Une taxe", "Un pr√™t", "Une part des b√©n√©fices revers√©e aux actionnaires"]}
        ]
        q = random.choice(questions)
        st.subheader(f"‚ùì {q['q']}")
        rep = st.radio("Votre r√©ponse :", q["opts"])
        if rep:
            if rep == q["r"]:
                st.success("Bonne r√©ponse ‚úÖ")
            else:
                st.error(f"Mauvaise r√©ponse ‚ùå. Bonne r√©ponse :*{q['r']}**")

# ========== üéØ Score Profil Investisseur ==========

if "üìã Profil Financier" in [tab.label for tab in tabs]:
    with tabs[0]:
        if submitted:
            score = evaluer_profil(age, risque, connaissance)
            st.markdown(f"### üéØ *Score investisseur : {score}/5*")
            if score <= 2:
                st.warning("Profil prudent : id√©al pour obligations ou fonds √©quilibr√©s.")
            elif score <= 4:
                st.info("Profil mod√©r√© : bon √©quilibre entre actions et obligations.")
            else:
                st.success("Profil dynamique : vous pouvez viser des rendements plus √©lev√©s.")
# ========== üìÖ Planificateur d'Objectifs ==========
tabs.append(st.tab("üéØ Objectifs Financiers"))
with tabs[-1]:
    st.header("üéØ Planificateur d‚ÄôObjectifs")
    objectifs = st.text_area("Listez vos objectifs (un par ligne)", "Acheter une maison\nFinancer les √©tudes\nVoyager")
    if objectifs:
        objectifs_list = objectifs.split("\n")
        delais = []
        for obj in objectifs_list:
            delais.append(st.slider(f"Combien d'ann√©es pour : {obj} ?", 1, 30, 5))
        st.write("### üóìÔ∏è R√©sum√© :")
        for o, d in zip(objectifs_list, delais):
            st.write(f"üîπ *{o}* dans*{d} ans**.")

# ========== üí∏ Suivi du Budget Mensuel ==========
tabs.append(st.tab("üí∏ Suivi Budget"))
with tabs[-1]:
    st.header("üí∏ Suivi du Budget")
    revenus = st.number_input("üí∞ Revenus mensuels ($)", min_value=0)
    depenses = {
        "Logement": st.number_input("üè† Logement", min_value=0),
        "Nourriture": st.number_input("üçΩÔ∏è Nourriture", min_value=0),
        "Transport": st.number_input("üöó Transport", min_value=0),
        "Divertissement": st.number_input("üéâ Divertissement", min_value=0),
        "Autres": st.number_input("üßæ Autres", min_value=0),
    }
    total_depenses = sum(depenses.values())
    reste = revenus - total_depenses
    st.metric("üíº √âpargne potentielle", f"{reste:,.2f} $")
    fig2, ax2 = plt.subplots()
    ax2.pie(depenses.values(), labels=depenses.keys(), autopct='%1.1f%%')
    ax2.axis('equal')
    st.pyplot(fig2)

# ========== üîî Alertes de Portefeuille ==========
tabs.append(st.tab("üîî Alertes"))
with tabs[-1]:
    st.header("üîî Alertes personnalis√©es")
    valeur_seuil = st.number_input("D√©clencher une alerte si la valeur d‚Äôun actif descend sous ($)", value=100)
    actif = st.text_input("Entrez le symbole boursier", value="AAPL")
    if st.button("V√©rifier le seuil"):
        try:
            prix_actuel = yf.Ticker(actif).info["currentPrice"]
            st.write(f"üìà Prix actuel de {actif}: {prix_actuel} $")
            if prix_actuel < valeur_seuil:
                st.warning(f"‚ö†Ô∏è {actif} est sous le seuil de {valeur_seuil} $")
            else:
                st.success(f"‚úÖ {actif} est au-dessus du seuil.")
        except:
            st.error("Erreur lors de la r√©cup√©ration du prix.")

# ========== üßæ G√©n√©rateur de Rapport PDF ==========
from fpdf import FPDF
import datetime

tabs.append(st.tab("üìÑ Rapport PDF"))
with tabs[-1]:
    st.header("üìÑ G√©n√©rateur de Rapport Financier")
    if st.button("üì• T√©l√©charger mon rapport"):
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        pdf.cell(200, 10, txt="Rapport Financier Personnel", ln=True, align="C")
        pdf.ln(10)
        pdf.cell(200, 10, txt=f"Date : {datetime.datetime.now().strftime('%d/%m/%Y')}", ln=True)
        pdf.cell(200, 10, txt=f"√Çge : {age}", ln=True)
        pdf.cell(200, 10, txt=f"Objectif : {objectif}", ln=True)
        pdf.cell(200, 10, txt=f"Investissement mensuel : {investissement_mensuel} $", ln=True)
        pdf.cell(200, 10, txt=f"Dur√©e : {duree} ans", ln=True)
        pdf.output("/tmp/rapport_financier.pdf")
        with open("/tmp/rapport_financier.pdf", "rb") as f:
            st.download_button("üì§ T√©l√©charger le PDF", f, file_name="rapport_financier.pdf")

# ========== üåê Convertisseur de Devises ==========
import requests

tabs.append(st.tab("üí± Convertisseur de Devises"))
with tabs[-1]:
    st.header("üí± Convertisseur")
    montant = st.number_input("Montant √† convertir", value=100.0)
    from_devise = st.selectbox("De", ["USD", "CAD", "EUR", "GBP"])
    to_devise = st.selectbox("Vers", ["USD", "CAD", "EUR", "GBP"], index=1)
    if st.button("Convertir"):
        try:
            url = f"https://api.exchangerate.host/convert?from={from_devise}&to={to_devise}&amount={montant}"
            response = requests.get(url).json()
            st.success(f"{montant} {from_devise} = {response['result']:.2f} {to_devise}")
        except:
            st.error("Erreur lors de la conversion.")